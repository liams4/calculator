{"ast":null,"code":"import _classCallCheck from \"/Users/liam/calculator/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/liam/calculator/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/liam/calculator/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/liam/calculator/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/liam/calculator/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/liam/calculator/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nvar Test =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Test, _Component);\n\n  function Test() {\n    _classCallCheck(this, Test);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Test).apply(this, arguments));\n  }\n\n  _createClass(Test, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"input\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 7\n        },\n        __self: this\n      }, \"hello\");\n    }\n  }]);\n\n  return Test;\n}(Component);\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"hi\"), React.createElement(Test, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nvar InputBar =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(InputBar, _React$Component2);\n\n  function InputBar(props) {\n    var _this;\n\n    _classCallCheck(this, InputBar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InputBar).call(this, props));\n    _this.state = {\n      input: 0,\n      currentValue: 0 // if (isNaN(input))\n\n    };\n    return _this;\n  }\n\n  _createClass(InputBar, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"input\", {\n        id: \"display\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, this.state.input);\n    }\n  }]);\n\n  return InputBar;\n}(React.Component);\n\nvar Buttons =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(Buttons, _React$Component3);\n\n  function Buttons(props) {\n    _classCallCheck(this, Buttons);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Buttons).call(this, props));\n  } // do we need to pass in parameters for handle click\n\n\n  _createClass(Buttons, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"clear\",\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"AC\"), React.createElement(\"button\", {\n        id: \"add\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"+\"), React.createElement(\"button\", {\n        id: \"one\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"1\"), React.createElement(\"button\", {\n        id: \"two\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"2\"), React.createElement(\"button\", {\n        id: \"three\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"3\"), React.createElement(\"button\", {\n        id: \"subtract\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"-\"), React.createElement(\"button\", {\n        id: \"four\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"4\"), React.createElement(\"button\", {\n        id: \"five\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"5\"), React.createElement(\"button\", {\n        id: \"six\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"6\"), React.createElement(\"button\", {\n        id: \"multiply\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"*\"), React.createElement(\"button\", {\n        id: \"seven\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"7\"), React.createElement(\"button\", {\n        id: \"eight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"8\"), React.createElement(\"button\", {\n        id: \"nine\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"9\"), React.createElement(\"button\", {\n        id: \"divide\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"/\"), React.createElement(\"button\", {\n        id: \"negate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"+/-\"), React.createElement(\"button\", {\n        id: \"zero\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"0\"), React.createElement(\"button\", {\n        id: \"decimal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \".\"));\n    }\n  }]);\n\n  return Buttons;\n}(React.Component);\n/*\nWe need - \nInput box that also displays text when the equals button is pressed. \neverything else is just ui. \n\nwe need to keep track of the current number that is displayed.\ntext/input should probably be its own component, buttons another, and app for everything else. \n\nToDo - App.css\n\nExtra features - remainder, fractions, +/-\n*/\n\n\nexport default App;","map":{"version":3,"sources":["/Users/liam/calculator/src/App.js"],"names":["React","Component","Test","App","props","InputBar","state","input","currentValue","Buttons","handleClick"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass Test extends Component {\n  render () {\n    return (\n      <input>hello</input>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return  (\n      <div>\n      <p>hi</p>\n      <Test />\n      </div>\n    );\n  }\n}\n\n\n\n\nclass InputBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input : 0,\n      currentValue : 0,\n    }\n    // if (isNaN(input))\n  }\n  render() {\n    return (\n    <input id=\"display\">{this.state.input}</input>\n    );\n  }\n\n}\n\n\nclass Buttons extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  // do we need to pass in parameters for handle click\n  render() {\n    return (\n      <div>\n      <button id=\"clear\" onClick={this.handleClick}>AC</button>\n      <button id=\"add\">+</button>\n      <button id=\"one\">1</button>\n      <button id=\"two\">2</button>\n      <button id=\"three\">3</button>\n      <button id=\"subtract\">-</button>\n      <button id=\"four\">4</button>\n      <button id=\"five\">5</button>\n      <button id=\"six\">6</button>\n      <button id=\"multiply\">*</button>\n      <button id=\"seven\">7</button>\n      <button id=\"eight\">8</button>\n      <button id=\"nine\">9</button>\n      <button id=\"divide\">/</button>\n      <button id=\"negate\">+/-</button>\n      <button id=\"zero\">0</button>\n      <button id=\"decimal\">.</button>\n      </div>\n    );\n  }\n}\n/*\nWe need - \nInput box that also displays text when the equals button is pressed. \neverything else is just ui. \n\nwe need to keep track of the current number that is displayed.\ntext/input should probably be its own component, buttons another, and app for everything else. \n\nToDo - App.css\n\nExtra features - remainder, fractions, +/-\n*/\n\n\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}