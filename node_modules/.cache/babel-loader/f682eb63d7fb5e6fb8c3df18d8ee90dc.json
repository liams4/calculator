{"ast":null,"code":"import _assertThisInitialized from \"/Users/liam/calculator/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _classCallCheck from \"/Users/liam/calculator/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/liam/calculator/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/liam/calculator/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/liam/calculator/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/liam/calculator/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/liam/calculator/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"parseInputAndCalculate\",\n    value: function parseInputAndCalculate() {\n      // if (total expression throws an arithmetic error) {\n      // throw new Error\n      // }\n      return 0;\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange() {} // so i think you should have a seperate component for the input bar too. the question is, how to get information\n    // from the buttons component to the input component. maybe we could render the input inside of buttons?  \n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"Welcome to a React Calculator!\"), React.createElement(\"p\", {\n        id: \"display\",\n        style: {\n          paddingLeft: \"100px\",\n          border: \"4px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, this.state.input), React.createElement(Buttons, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component); // add style stuff to app.css\n// do we need to pass in parameters for handle click\n// so pass props in which are the current values\n// so add everything to a string--- when the equals button is pressedthen you loop through the string, and if it is a number/decimal, you add it to the current number. \n// when it is not a number, parse the number and store the last operand. Then, when you reach either the end of the string or the\n// next operand, perform the operator conditionally on which operand. \n// i think the logic for pressing button and changing states dependent on that should be done in the button class. \n\n/*\nToDo - App.css\ncannot let user do multiple decimals or operands(so ignore multiple), multiple zeros to start.\nExtra features - remainder, fractions, using the keyboard instead of clicking\n\n*/\n\n\nvar Buttons =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(Buttons, _React$Component2);\n\n  function Buttons(props) {\n    var _this;\n\n    _classCallCheck(this, Buttons);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Buttons).call(this, props));\n    _this.state = {\n      input: '',\n      oldValue: 1\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Buttons, [{\n    key: \"handleClick\",\n    value: function handleClick(symbol) {\n      if (symbol == 'clear') {// input = 0\n        // oldValue = 1\n      } else if (symbol == 'equals') {// calculate and display answer\n        // set oldValue to answer\n      } else {// this.setState({input : input + ' ' + symbol})\n        }\n    } // apply a regular button class style and a special one for all clear\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(UserInput, {\n        input: this.state.input,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"clear\",\n        style: {\n          paddingLeft: 40\n        },\n        onClick: this.handleClick('clear'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"AC\"), React.createElement(\"button\", {\n        id: \"add\",\n        onClick: this.handleClick('+'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"+\")), React.createElement(\"div\", {\n        className: \"row2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"one\",\n        onClick: this.handleClick('1'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"1\"), React.createElement(\"button\", {\n        id: \"two\",\n        onClick: this.handleClick('2'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"2\"), React.createElement(\"button\", {\n        id: \"three\",\n        onClick: this.handleClick('3'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"3\"), React.createElement(\"button\", {\n        id: \"subtract\",\n        onClick: this.handleClick('-'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"-\")), React.createElement(\"div\", {\n        className: \"row3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"four\",\n        onClick: this.handleClick('4'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"4\"), React.createElement(\"button\", {\n        id: \"five\",\n        onClick: this.handleClick('5'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"5\"), React.createElement(\"button\", {\n        id: \"six\",\n        onClick: this.handleClick('6'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"6\"), React.createElement(\"button\", {\n        id: \"multiply\",\n        onClick: this.handleClick('*'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"*\")), React.createElement(\"div\", {\n        className: \"row4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"seven\",\n        onClick: this.handleClick('7'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"7\"), React.createElement(\"button\", {\n        id: \"eight\",\n        onClick: this.handleClick('8'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"8\"), React.createElement(\"button\", {\n        id: \"nine\",\n        onClick: this.handleClick('9'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"9\"), React.createElement(\"button\", {\n        id: \"divide\",\n        onClick: this.handleClick('/'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"/\")), React.createElement(\"div\", {\n        className: \"row5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"negate\",\n        onClick: this.handleClick('*-1'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"+/-\"), React.createElement(\"button\", {\n        id: \"zero\",\n        onClick: this.handleClick('0'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"0\"), React.createElement(\"button\", {\n        id: \"decimal\",\n        onClick: this.handleClick('.'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \".\"), React.createElement(\"button\", {\n        id: \"equals\",\n        onClick: this.handleClick('='),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"=\")));\n    }\n  }]);\n\n  return Buttons;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/liam/calculator/src/App.js"],"names":["React","Component","App","paddingLeft","border","state","input","Buttons","props","oldValue","handleClick","bind","symbol"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  parseInputAndCalculate() {\n    // if (total expression throws an arithmetic error) {\n    // throw new Error\n    // }\n    return 0;\n  }\n\n  handleChange() {\n\n  }\n\n   // so i think you should have a seperate component for the input bar too. the question is, how to get information\n   // from the buttons component to the input component. maybe we could render the input inside of buttons?  \n   render () {\n    return (\n      <div>\n      <p>Welcome to a React Calculator!</p>\n      \n      <p id = \"display\" style = {{paddingLeft : \"100px\", border :\"4px\"}}>{this.state.input}</p>\n      <Buttons />\n      </div>\n    );\n  }\n}\n\n\n// add style stuff to app.css\n// do we need to pass in parameters for handle click\n// so pass props in which are the current values\n\n\n\n// so add everything to a string--- when the equals button is pressedthen you loop through the string, and if it is a number/decimal, you add it to the current number. \n// when it is not a number, parse the number and store the last operand. Then, when you reach either the end of the string or the\n// next operand, perform the operator conditionally on which operand. \n\n// i think the logic for pressing button and changing states dependent on that should be done in the button class. \n\n/*\nToDo - App.css\ncannot let user do multiple decimals or operands(so ignore multiple), multiple zeros to start.\nExtra features - remainder, fractions, using the keyboard instead of clicking\n\n*/\n\n\nclass Buttons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input : '',\n      oldValue : 1,\n    }\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(symbol) {\n    if (symbol == 'clear') {\n      // input = 0\n      // oldValue = 1\n    } else if (symbol == 'equals'){\n      // calculate and display answer\n      // set oldValue to answer\n    } else {\n      // this.setState({input : input + ' ' + symbol})\n    }\n  }\n\n  // apply a regular button class style and a special one for all clear\n  render() {\n    return (\n      <div>\n      <UserInput input={this.state.input} />\n      <div className=\"row1\">\n      <button id=\"clear\" style={{paddingLeft : 40}} onClick={this.handleClick('clear')}>AC</button>\n      <button id=\"add\" onClick={this.handleClick('+')}>+</button>\n      </div>\n      <div className=\"row2\">\n      <button id=\"one\" onClick={this.handleClick('1')}>1</button>\n      <button id=\"two\" onClick={this.handleClick('2')}>2</button>\n      <button id=\"three\" onClick={this.handleClick('3')}>3</button>\n      <button id=\"subtract\" onClick={this.handleClick('-')}>-</button>\n      </div>\n      <div className=\"row3\">\n      <button id=\"four\" onClick={this.handleClick('4')}>4</button>\n      <button id=\"five\" onClick={this.handleClick('5')}>5</button>\n      <button id=\"six\" onClick={this.handleClick('6')}>6</button>\n      <button id=\"multiply\" onClick={this.handleClick('*')}>*</button>\n      </div>\n      <div className=\"row4\">\n      <button id=\"seven\" onClick={this.handleClick('7')}>7</button>\n      <button id=\"eight\" onClick={this.handleClick('8')}>8</button>\n      <button id=\"nine\" onClick={this.handleClick('9')}>9</button>\n      \n      <button id=\"divide\" onClick={this.handleClick('/')}>/</button>\n      </div>\n      <div className=\"row5\">\n      <button id=\"negate\" onClick={this.handleClick('*-1')}>+/-</button>\n      <button id=\"zero\" onClick={this.handleClick('0')}>0</button>\n      <button id=\"decimal\" onClick={this.handleClick('.')}>.</button>\n      <button id=\"equals\" onClick={this.handleClick('=')}>=</button>\n      </div>\n      </div>\n    );\n  }\n}\n\n\n\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}