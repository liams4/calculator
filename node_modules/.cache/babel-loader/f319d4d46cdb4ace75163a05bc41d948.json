{"ast":null,"code":"import _classCallCheck from \"/Users/liam/calculator/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/liam/calculator/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/liam/calculator/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/liam/calculator/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/liam/calculator/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/liam/calculator/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/liam/calculator/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css'; // add style stuff to app.css\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      input: ''\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"parseInputAndCalculate\",\n    value: function parseInputAndCalculate() {\n      // if (total expression throws an arithmetic error) {\n      // throw new Error\n      // }\n      return 0;\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"hello\"), React.createElement(\"p\", {\n        id: \"display\",\n        style: {\n          paddingLeft: \"60px\",\n          border: \"4px\",\n          fontSize: \"40px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"button\"), React.createElement(Buttons, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component); // do we need to pass in parameters for handle click\n// so pass props in which are the current values\n// I think we can have these as different classes, but have different\n// so add everything to a string--- when the equals button is pressedthen you loop through the string, and if it is a number/decimal, you add it to the current number. \n// when it is not a number, parse the number and store the last operand. Then, when you reach either the end of the string or the\n// next operand, perform the operator conditionally on which operand. \n\n/*\nToDo - App.css\ncannot let user do multiple decimals or operands(so ignore multiple), multiple zeros to start.\nExtra features - remainder, fractions, +/-\n*/\n\n\nvar Buttons =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(Buttons, _React$Component2);\n\n  function Buttons(props) {\n    _classCallCheck(this, Buttons);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Buttons).call(this, props));\n  }\n\n  _createClass(Buttons, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"clear\",\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"AC\"), React.createElement(\"button\", {\n        id: \"add\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"+\"), React.createElement(\"button\", {\n        id: \"one\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"1\"), React.createElement(\"button\", {\n        id: \"two\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"2\"), React.createElement(\"button\", {\n        id: \"three\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"3\"), React.createElement(\"button\", {\n        id: \"subtract\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"-\"), React.createElement(\"button\", {\n        id: \"four\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"4\"), React.createElement(\"button\", {\n        id: \"five\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"5\"), React.createElement(\"button\", {\n        id: \"six\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"6\"), React.createElement(\"button\", {\n        id: \"multiply\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"*\"), React.createElement(\"button\", {\n        id: \"seven\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"7\"), React.createElement(\"button\", {\n        id: \"eight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"8\"), React.createElement(\"button\", {\n        id: \"nine\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"9\"), React.createElement(\"button\", {\n        id: \"divide\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"/\"), React.createElement(\"button\", {\n        id: \"negate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"+/-\"), React.createElement(\"button\", {\n        id: \"zero\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"0\"), React.createElement(\"button\", {\n        id: \"decimal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \".\"));\n    }\n  }]);\n\n  return Buttons;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/liam/calculator/src/App.js"],"names":["React","Component","App","props","state","input","handleChange","bind","paddingLeft","border","fontSize","Buttons","handleClick"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n// add style stuff to app.css\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input : '',\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  \n\n\n  parseInputAndCalculate() {\n    // if (total expression throws an arithmetic error) {\n    // throw new Error\n    // }\n    return 0;\n  }\n\n  handleChange() {\n\n  }\n\n  \n   render () {\n    return (\n      <div>\n      <p>hello</p>\n      \n      <p id = \"display\" style = {{paddingLeft : \"60px\", border :\"4px\", fontSize : \"40px\"}}>button</p>\n      <Buttons />\n      </div>\n    );\n  }\n}\n\n// do we need to pass in parameters for handle click\n// so pass props in which are the current values\n\n// I think we can have these as different classes, but have different\n\n// so add everything to a string--- when the equals button is pressedthen you loop through the string, and if it is a number/decimal, you add it to the current number. \n// when it is not a number, parse the number and store the last operand. Then, when you reach either the end of the string or the\n// next operand, perform the operator conditionally on which operand. \n\n/*\nToDo - App.css\ncannot let user do multiple decimals or operands(so ignore multiple), multiple zeros to start.\nExtra features - remainder, fractions, +/-\n*/\n\n\nclass Buttons extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n      <button id=\"clear\" onClick={this.handleClick}>AC</button>\n      <button id=\"add\">+</button>\n      <button id=\"one\">1</button>\n      <button id=\"two\">2</button>\n      <button id=\"three\">3</button>\n      <button id=\"subtract\">-</button>\n      <button id=\"four\">4</button>\n      <button id=\"five\">5</button>\n      <button id=\"six\">6</button>\n      <button id=\"multiply\">*</button>\n      <button id=\"seven\">7</button>\n      <button id=\"eight\">8</button>\n      <button id=\"nine\">9</button>\n      <button id=\"divide\">/</button>\n      <button id=\"negate\">+/-</button>\n      <button id=\"zero\">0</button>\n      <button id=\"decimal\">.</button>\n      </div>\n    );\n  }\n}\n\n\n\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}